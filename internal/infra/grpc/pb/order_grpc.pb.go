// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/infra/grpc/protofiles/order.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ListOrders_CreateOrder_FullMethodName = "/pb.ListOrders/CreateOrder"
	ListOrders_ListOrders_FullMethodName  = "/pb.ListOrders/ListOrders"
)

// ListOrdersClient is the client API for ListOrders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListOrdersClient interface {
	CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
	ListOrders(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*ListOrdersResponse, error)
}

type listOrdersClient struct {
	cc grpc.ClientConnInterface
}

func NewListOrdersClient(cc grpc.ClientConnInterface) ListOrdersClient {
	return &listOrdersClient{cc}
}

func (c *listOrdersClient) CreateOrder(ctx context.Context, in *CreateOrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, ListOrders_CreateOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *listOrdersClient) ListOrders(ctx context.Context, in *Blank, opts ...grpc.CallOption) (*ListOrdersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOrdersResponse)
	err := c.cc.Invoke(ctx, ListOrders_ListOrders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListOrdersServer is the server API for ListOrders service.
// All implementations must embed UnimplementedListOrdersServer
// for forward compatibility.
type ListOrdersServer interface {
	CreateOrder(context.Context, *CreateOrderRequest) (*OrderResponse, error)
	ListOrders(context.Context, *Blank) (*ListOrdersResponse, error)
	mustEmbedUnimplementedListOrdersServer()
}

// UnimplementedListOrdersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedListOrdersServer struct{}

func (UnimplementedListOrdersServer) CreateOrder(context.Context, *CreateOrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedListOrdersServer) ListOrders(context.Context, *Blank) (*ListOrdersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrders not implemented")
}
func (UnimplementedListOrdersServer) mustEmbedUnimplementedListOrdersServer() {}
func (UnimplementedListOrdersServer) testEmbeddedByValue()                    {}

// UnsafeListOrdersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListOrdersServer will
// result in compilation errors.
type UnsafeListOrdersServer interface {
	mustEmbedUnimplementedListOrdersServer()
}

func RegisterListOrdersServer(s grpc.ServiceRegistrar, srv ListOrdersServer) {
	// If the following call pancis, it indicates UnimplementedListOrdersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ListOrders_ServiceDesc, srv)
}

func _ListOrders_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListOrdersServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListOrders_CreateOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListOrdersServer).CreateOrder(ctx, req.(*CreateOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ListOrders_ListOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blank)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListOrdersServer).ListOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListOrders_ListOrders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListOrdersServer).ListOrders(ctx, req.(*Blank))
	}
	return interceptor(ctx, in, info, handler)
}

// ListOrders_ServiceDesc is the grpc.ServiceDesc for ListOrders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListOrders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ListOrders",
	HandlerType: (*ListOrdersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrder",
			Handler:    _ListOrders_CreateOrder_Handler,
		},
		{
			MethodName: "ListOrders",
			Handler:    _ListOrders_ListOrders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/infra/grpc/protofiles/order.proto",
}
